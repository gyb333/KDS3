import { Component, Injector } from '@angular/core';
import { IonicPage, ScreenBase, Utils, EntityQuery, config, EntityManager, UriBuilderODataAdapter, DataService, EntityManagerConfig, MetadataHelper, AutoGeneratedKeyType, DataType, EntityKey, EntityType, RemoteDataSet, RemoteDataObject, LocalDataSet, LocalDataObject, Screen, ScreenMethod, ScreenProperty, ParameterType } from '../../../../platform';

<# foreach (var member in ImportEntity) { #>
import * as <#= member.Value #>Model from "../../models/<#= member.Value #>"
<# } #>


<# foreach (var item in DataSetData) { #>
<# if(string.IsNullOrEmpty(item.Value.EntityName)) { #>
class Custom<#= item.Value.Name #> {
	constructor() { }
<# } else { #>
class Custom<#= item.Value.Name #> extends <#= item.Value.EntityName #>Model.<#= item.Value.EntityName #> {
	constructor() { super(); }
<# } #>
	<# foreach (var member in item.Value.SelectedItemMembers) { #>/**
	* <#= member.Title #>
	*/
	@ScreenProperty()
	<# if(member.DefaultValue == null) { #>
	public <#= member.Name #>: <#= member.DataType #>;
	<# } else { #>
		<# if(member.DataType == "number" || member.DataType == "boolean") { #>
	public <#= member.Name #>: <#= member.DataType #> = <#= member.DefaultValue #>;
		<# } else { #>
	public <#= member.Name #>: <#= member.DataType #> = "<#= member.DefaultValue #>";
		<# } #>
	<# } #>
	<# } #>

	<# foreach (var member in item.Value.SelectedItemMethods) { #>/**
	* <#= member.Title #>
	*/
	@ScreenMethod({ name:"<#= member.Name #>", parameters:[<#= member.ParamsBind #>]})
	public <#= member.Name #>(<#= member.Params #>) {
		<#= member.Body #>
	}
	<# } #>
}
class Custom<#= item.Value.Type #><#= item.Value.Name #> extends <#= item.Value.Type #><Custom<#= item.Value.Name #>> {
	<# if(item.Value.Type == "RemoteDataObject" || item.Value.Type == "LocalDataObject") { #>
	constructor(modeName: string) {
		super(modeName);
	}
	<# } else { #>
	constructor(modeName: string, options: object) {
		super(modeName, options);
	}
	<# } #>

	<# foreach (var member in item.Value.DataPropertys) { #>/**
	* <#= member.Title #>
	*/
	@ScreenProperty()
	<# if(member.DefaultValue == null) { #>
	public <#= member.Name #>: <#= member.DataType #>;
	<# } else { #>
		<# if(member.DataType == "number" || member.DataType == "boolean") { #>
	public <#= member.Name #>: <#= member.DataType #> = <#= member.DefaultValue #>;
		<# } else { #>
	public <#= member.Name #>: <#= member.DataType #> = "<#= member.DefaultValue #>";
		<# } #>
	<# } #>
	<# } #>

	<# foreach (var member in item.Value.DataEvents) { #>/**
	* <#= member.Title #>
	*/
	public <#= member.Name #>() {
		<#= member.Body #>
	}
	<# } #>

	<# foreach (var member in item.Value.DataMethods) { #>/**
	* <#= member.Title #>
	*/
	@ScreenMethod({ name:"<#= member.Name #>", parameters:[<#= member.ParamsBind #>]})
	public <#= member.Name #>(<#= member.Params #>) {
		<#= member.Body #>
	}
	<# } #>
}
<# } #>


<# foreach (var member in ScreenParamData) { #>
@Screen({ 
name:"<#= member.Key #>",
parameters:{ <#= member.Value.Content #> }
})
<# } #>


@Component({
  templateUrl: '<#= Documnet.Name #>.html'
})
export class <#= Documnet.Name #> extends ScreenBase {
  constructor(private injector: Injector) {
    super(injector);
  }

	<# foreach (var member in PropertyData) { #>/**
	* <#= member.Value.Title #>
	*/
	@ScreenProperty()
	<# if(member.Value.DefaultValue == null) { #>
	public <#= member.Value.Name #>: <#= member.Value.DataType #>;
	<# } else { #>
		<# if(member.Value.DataType == "number" || member.Value.DataType == "boolean") { #>
	public <#= member.Value.Name #>: <#= member.Value.DataType #> = <#= member.Value.DefaultValue #>;
		<# } else { #>
	public <#= member.Value.Name #>: <#= member.Value.DataType #> = "<#= member.Value.DefaultValue #>";
		<# } #>
	<# } #>
	<# } #>

	<# foreach (var member in EventData) { #>/**
	* <#= member.Value.Title #>
	*/
	public <#= member.Value.Name #>() {
		<#= member.Value.Body #>
	}
	<# } #>

	<# foreach (var member in MethodData) { #>/**
	* <#= member.Value.Title #>
	*/
	@ScreenMethod({ name:"<#= member.Value.Name #>", parameters:[<#= member.Value.ParamsBind #>]})
	public <#= member.Value.Name #>(<#= member.Value.Params #>) {
		<#= member.Value.Body #>
	}
	<# } #>

	<# foreach (var member in DataSetData) { #>/**
	* <#= member.Value.Title #>
	*/
	@ScreenProperty({ 
	name: "<#= member.Value.Name #>",
	type: [Custom<#= member.Value.Type #><#= member.Value.Name #>, Custom<#= member.Value.Name #>],
	options: { <#= member.Value.Options #> }
	})
	public <#= member.Value.Name #>: Custom<#= member.Value.Type #><#= member.Value.Name #>;
	<# } #>
}